/* File: RandomNetworkModel.java
 Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)

 The Cytoscape Consortium is:
 - Institute for Systems Biology
 - University of California San Diego
 - Memorial Sloan-Kettering Cancer Center
 - Institut Pasteur
 - Agilent Technologies

 This library is free software; you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published
 by the Free Software Foundation; either version 2.1 of the License, or
 any later version.

 This library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
 documentation provided hereunder is on an "as is" basis, and the
 Institute for Systems Biology and the Whitehead Institute
 have no obligations to provide maintenance, support,
 updates, enhancements or modifications.  In no event shall the
 Institute for Systems Biology and the Whitehead Institute
 be liable to any party for direct, indirect, special,
 incidental or consequential damages, including lost profits, arising
 out of the use of this software and its documentation, even if the
 Institute for Systems Biology and the Whitehead Institute
 have been advised of the possibility of such damage.  See
 the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */


package cytoscape.randomnetwork;

import cytoscape.*;
import java.util.Random;


/**
 * The base class for all random network models.
 *
 *
 *
 *
 * @author Patrick J. McSweeney
 * @version 1.0
 */
public abstract class RandomNetworkModel implements RandomNetworkGenerator{

	/**
	 * The number of nodes in generated network.
	 */
	protected int numNodes;

	/**
	 *The number of edges in generated network.
	 */
	protected int numEdges;

	/**
	 * Whether the generated networks are directed or not.
	 */
	protected boolean directed;
	
	/** 
	 * Whether to allow reflexive edges in generated networks.
	 */
	protected boolean allowSelfEdge;

	/**
	 * Experimental seed.
	 */
	protected long seed;

	/**
	 * Random number generated.
	 */
	protected Random random;

	/**
	 * Whether or not to display generated networks in Cytoscape.
	 */
	protected boolean createView;

	/**
	 * A Flag to represent that a value is not set and perhaps not needed.
	 */
	protected static int UNSPECIFIED = -1;


	/**
	 * This constructor should be called from all extending classes.  If parameters are unnecessary, or do not apply
	 * then UNSPECIFIED should be passsed.
	 *
	 * @param pNumNodes The number of nodes in networks that this model creates.
	 * @param pNumEdges The number of edges in networks that this model creates.
	 * @param pAllowSelfEdge Whether or not to allow an edge that has the same node for both target and source (u,u).
	 * @param pDirected Whether or not the edges have direction.
	 *
	 */
	RandomNetworkModel(int pNumNodes, int pNumEdges, boolean pAllowSelfEdge,
			boolean pDirected) {
		numNodes = pNumNodes;
		numEdges = pNumEdges;
		directed = pDirected;
		allowSelfEdge = pAllowSelfEdge;
		seed = UNSPECIFIED;
		createView = true;
		seed = System.currentTimeMillis();
		random = new Random(seed);
	}

	/**
	 *  Sets the seed for this models random number generator.
	 *
	 * @param pSeed The seed to set for the random # generator.
	 */
	public void setSeed(long pSeed) {
		seed = pSeed;
		random = new Random(seed);
	}

	/**
	 * Returns the seed associated with this random network model.
	 *
	 *
	 * @return The current seed.
	 */
	public long getSeed() {
		return seed;
	}

	/**
 	 * Returns the number of nodes in networks generated by this RandomNetworkModel.
	 * May return UNSPECIFIED, if the number of nodes is variable.
	 *
	 * @return The number of nodes in networks generated by this class.
	 */
	public int getNumNodes() {
		return numNodes;
	}

	/**
	 * Returns the number of edges in networks generated by this RandomNetworkModel.
	 * May return UNSPECIFIED, if the number of edges is variable.
	 * @return The number of edges in networks generated by this class.
	 */	
	public int getNumEdges() {
		return numEdges;
	}

	/**
	 * Returns the directedness of edges in networks generated by this RandomNetworkModel.
	 * May not return UNSPECIFIED. All RandomNetworkModels must be directed or undirected.
	 * Currently mixing of edge types is not supported.
	 * <p>
	 * Returns true if edges have a source and target.
	 * <p>
	 * Returns false if edges are unordered pairs.
	 *
	 * @return Whether or not this RandomNetworkModel produces networks with ordered-pair edges.
	 */	
	public boolean getDirected() {
		return directed;
	}
	
    /**
	 * Returns the whether or not networks generated are displayed in Cytoscape.
	 * May not return UNSPECIFIED.  All RandomNetworkModels must either create views or not create views.
	 * <p>
	 * Returns true means that networks created will be displayed in the Cytoscape Panel.
	 * <p>
	 * Returns false means that networks are used for statistics collection (in general).
	 *
	 * @return Whether or not this RandomNetworkModel creates views of the networks it creates <b>automatically</b> upon generation.
	 */	
	public boolean getCreateView(){
		return createView;
	}
	
	/**
	 *  Sets whether or not networks generated are displayed in Cytoscape.
	 *  May not return UNSPECIFIED.  All RandomNetworkModels must either create views or not create views.
	 * <p>
	 * Setting the value to true means that networks created will be displayed in the Cytoscape Panel.
	 * <p>
	 * Setting the value to false means that networks are used for statistics collection (in general).
	 *
	 * @param pCreateView Sets whether or not this RandomNetworkModel creates views of the networks it creates <b>automatically</b> upon generation.
	 *                     Memory considerations should be made when keeping as true. 
	 */	
	public void setCreateView(boolean pCreateView){
		createView = pCreateView;
	}

}
